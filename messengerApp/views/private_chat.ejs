<html>
    <head>
        <meta name="viewport" content="width=device-width,initial-scale=1.0">
        <link rel="stylesheet" type="text/css" href="/css/private_chat.css" />
        <title>Private chat</title>
        <style>
            .hidden {
                display: none;
            }
        </style>
    </head>
    <body>
        <div id="sidebar" class="sidebar">
            <p style='color: white'> Current User: </p>
            <p id='userName' style='color: white'><%= uname %></p>
            <form id="formA" action="">
                <div class="div-roomName">
                    <input class='roomInput' id="roomName" autocomplete="off" name="roomName" type="text" required placeholder="Room Name"/>
                </div>
                <div class="div-roomCode">
                    <input class='codeInput' id="roomCode" autocomplete="off" name="roomCode" type="password" required placeholder="Room Code"/>
                </div>
                <div class="button-wrapper">
                    <button class="joinRoom" type="submit">Join Room</button>
                </div>
            </form> 
        </div>
        <div class="userSidebar">
            <p style='color: white'> Users: </p>
            <ul id="online"></ul>
        </div>
        <div id="messageDiv" class="messageWrapper">
            <em id="typing"></em>
            <ul id="messages"></ul>
            <form id="form" action="">
                <input id="input" autocomplete="off" /><a class="home" href="/protected_page.js">Profile</a><button>Send</button>
            </form>
        </div>
        <script src="/socket.io/socket.io.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
        <script>
        const socket = io({
            withCredentials: true
        });
        const typying = false;
        const timeout = undefined;
        
        const online = document.getElementById('online');
        const typing = document.getElementById('typing');
        const messages = document.getElementById('messages');
        const formA = document.getElementById('formA');
        const bigDiv = document.getElementById('sidebar');
        const input = document.getElementById('input');
        const formB = document.getElementById('form');
        const roomName = document.getElementById('roomName');
        const roomCode = document.getElementById('roomCode');
        const userName = document.getElementById('userName').textContent;

        formA.addEventListener('submit', function(e) {
            e.preventDefault();
            if (roomName.value) {
                socket.emit('joinRoom', roomName.value, roomCode.value, userName);
                socket.emit('online', userName);
                //formA.classList.add('hidden');
                //bigDiv.classList.add('hidden');
            }
        });
        
        formB.addEventListener('submit', function(e) {
            e.preventDefault();
            if (input.value) {
                socket.emit('chat message', input.value);
                input.value = '';
            }
        });

        // unfinished
        input.addEventListener('keyup', function(e) {
            e.preventDefault();
            console.log('user is typing');
            socket.emit('typing', (data));
        });
        
        socket.on('chat message', function(msg) {
            var item = document.createElement('li');
            socket.userName = userName.value;
            item.textContent = msg;
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

        socket.on('online', function(data) {
            var item = document.createElement('li');
            item.id = data;
            item.textContent = data;
            online.appendChild(item);
        });

        socket.on('offline', function(data) {;
            const item = document.getElementById(data);
            if (item.parentNode) {
                item.parentNode.removeChild(item);
            }
            // online.querySelectorAll('li').forEach(function(item) {
            //     if (item.id == userName) {
            //         //item.classList.add('hidden');
            //         $(`#${userName}`).remove();
            //     }
            // });
            // var items = online.getElementsByTagName("li");
            // for(var i = items.length - 1; i >= 0; i--) {
            //     if (items[i].textContent === userName) {
            //         items[i].remove();
            //     }
            // }
        });

        socket.on('disconnect', function() {
            socket.emit('offline', userName);
        });

        // unfinished
        socket.on('typing', function(data){
            if (data) {
                typing.innerHTML = `<p>${socket.username} is typing ... </p>`;
            }
        });
        </script>
    </body>
</html>